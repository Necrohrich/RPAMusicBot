import asyncio
import shutil
import aiofiles
import disnake
import yt_dlp
from disnake.ext import commands
import os

from utils.autocomplete_helpers import filename_autocomplete
from utils.functions import get_user_folder, to_seconds
from utils.logger import Logger
from utils.mix import AudioMixer

DISCORD_FILE_LIMIT_MB = 8
DISCORD_FILE_LIMIT_BYTES = DISCORD_FILE_LIMIT_MB * 1024 * 1024

class TrackManagementCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="upload", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é music –∏–ª–∏ ambient")
    async def upload_file(self, inter: disnake.ApplicationCommandInteraction,
                          file: disnake.Attachment,
                          track_type: str = commands.Param(choices=["music", "ambient"], description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–∫–∞"),
                          new_name: str = commands.Param(default=None,
                                                         description="–ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")):
        await inter.response.defer()
        user_folder = get_user_folder(track_type, inter.author.id)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ, –∏–Ω–∞—á–µ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è
        filename = f"{new_name}.mp3" if new_name else file.filename

        path = os.path.join(user_folder, filename)
        async with aiofiles.open(path, "wb") as f:
            content = await file.read()
            await f.write(content)

        await inter.edit_original_message(f"–¢—Ä–µ–∫ **{filename}** –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é `{track_type}`.")

    @commands.slash_command(name="upload_url", description="–°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ –ø–æ —Å—Å—ã–ª–∫–µ (YouTube –∏ –¥—Ä.)")
    async def upload_url(self, inter: disnake.ApplicationCommandInteraction,
                         url: str = commands.Param(description="–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ"),
                         track_name: str = commands.Param(description="–ò–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"),
                         track_type: str = commands.Param(choices=["music", "ambient"], description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–∫–∞"),
                         start: str = commands.Param(default="00:00:00", description="–ù–∞—á–∞–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 00:01:30)",
                                                     name="–Ω–∞—á–∞–ª–æ"),
                         end: str = commands.Param(default="", description="–ö–æ–Ω–µ—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä 00:03:00)", name="–∫–æ–Ω–µ—Ü")):
        await inter.response.defer()
        user_folder = get_user_folder(track_type, inter.author.id)
        final_path = os.path.join(user_folder, f"{track_name}.mp3")

        start_sec = to_seconds(start) if start else 0
        end_sec = to_seconds(end) if end.strip() else None
        duration = end_sec - start_sec if end_sec and end_sec > start_sec else None

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º–æ–π URL –ø–æ—Ç–æ–∫–∞
        try:
            ydl_opts = {"quiet": True, "no_warnings": True, "format": "bestaudio/best"}
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = await asyncio.to_thread(lambda: ydl.extract_info(url, download=False))
                stream_url = info["url"]
        except Exception as e:
            return await inter.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ç–æ–∫: {e}")

        # –ü–µ—Ä–≤–æ–µ –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        progress_message = await inter.followup.send("üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏‚Ä¶", ephemeral=False)

        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É ffmpeg
        ffmpeg_command = [
            "ffmpeg", "-y", "-hide_banner",
            # seek –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –¥–æ –≤—Ö–æ–¥–∞ –ø–æ—Ç–æ–∫–∞
            *(["-ss", str(start_sec)] if start_sec > 0 else []),
            "-i", stream_url,
            # duration, –µ—Å–ª–∏ –µ—Å—Ç—å
            *(["-t", str(duration)] if duration else []),
            # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ 8 –ú–ë
            "-fs", str(DISCORD_FILE_LIMIT_BYTES),
            # –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            "-vn", "-acodec", "libmp3lame", "-ab", "64k",
            "-progress", "pipe:1", "-nostats",
            final_path
        ]

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process = await asyncio.create_subprocess_exec(
            *ffmpeg_command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.DEVNULL
        )

        async def update_progress():
            last_pct = None
            while True:
                line = await process.stdout.readline()
                if not line:
                    break
                text = line.decode().strip()
                if text.startswith("out_time_ms="):
                    ms = int(text.split("=", 1)[1])
                    sec = ms // 1_000_000
                    if duration:
                        pct = min(int(sec / duration * 100), 100)
                        if pct != last_pct:
                            msg = f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {pct}%"
                            Logger.log(msg)
                            try:
                                await progress_message.edit(content=msg)
                            except disnake.HTTPException as error:
                                Logger.log_exception(error)
                            last_pct = pct
                    else:
                        # –±–µ–∑ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏, –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
                        h = sec // 3600
                        m = (sec % 3600) // 60
                        s = sec % 60
                        time_str = f"{h:02d}:{m:02d}:{s:02d}"
                        msg = f"‚è≥ –ü—Ä–æ–π–¥–µ–Ω–æ: {time_str}"
                        try:
                            await progress_message.edit(content=msg)
                        except disnake.HTTPException as error:
                            Logger.log_exception(error)

        updater = asyncio.create_task(update_progress())
        returncode = await process.wait()
        updater.cancel()

        if returncode != 0:
            new_content = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ffmpeg."
        else:
            new_content = f"‚úÖ –¢—Ä–µ–∫ **{track_name}** –∑–∞–≥—Ä—É–∂–µ–Ω –≤ `{track_type}`."

        await progress_message.edit(content=new_content)
        return None

    @commands.slash_command(name="delete_track", description="–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    async def delete_track(self, inter: disnake.ApplicationCommandInteraction,
                           track_type: str = commands.Param(choices=["music", "ambient", "mixed"],
                                                            description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–∫–∞"),
                           filename: str = commands.Param(description="–ò–º—è —Ñ–∞–π–ª–∞ —Ç—Ä–µ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")):
        user_folder = get_user_folder(track_type, inter.author.id)
        path = os.path.join(user_folder, filename)

        if not os.path.exists(path):
            await inter.response.send_message("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return

        try:
            os.remove(path)
            await inter.response.send_message(f"–¢—Ä–µ–∫ **{filename}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{track_type}`.")
        except Exception as e:
            await inter.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", ephemeral=True)

    @commands.slash_command(name="delete_all_tracks", description="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    async def delete_all_tracks(self, inter: disnake.ApplicationCommandInteraction,
                                track_type: str = commands.Param(choices=["music", "ambient", "mixed"],
                                                                 description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")):
        user_folder = get_user_folder(track_type, inter.author.id)

        if not os.path.exists(user_folder):
            await inter.response.send_message("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return

        deleted_files = 0
        try:
            for filename in os.listdir(user_folder):
                file_path = os.path.join(user_folder, filename)
                if os.path.isfile(file_path):
                    os.remove(file_path)
                    deleted_files += 1

            await inter.response.send_message(
                f"–£–¥–∞–ª–µ–Ω–æ {deleted_files} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{track_type}`.",
                ephemeral=True
            )
        except Exception as e:
            await inter.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}", ephemeral=True)

    @commands.slash_command(name="move_track", description="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫ –∏–∑ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥—Ä—É–≥—É—é")
    async def move_track(
            self,
            inter: disnake.ApplicationCommandInteraction,
            source_type: str = commands.Param(
                choices=["music", "ambient", "mixed"],
                description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–Ω–æ—Å–∏–º"
            ),
            filename: str = commands.Param(
                description="–ò–º—è —Ç—Ä–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å (–≤–∫–ª—é—á–∞—è .mp3)"
            ),
            target_type: str = commands.Param(
                choices=["music", "ambient", "mixed"],
                description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–Ω–æ—Å–∏–º"
            )
    ):
        """
        –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ç—Ä–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: music, ambient, mixed.
        """

        await inter.response.defer(ephemeral=True)

        if source_type == target_type:
            await inter.edit_original_message("–ò—Å—Ö–æ–¥–Ω–∞—è –∏ —Ü–µ–ª–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ.")
            return

        try:
            user_id = inter.author.id
            source_folder = get_user_folder(source_type, user_id)
            target_folder = get_user_folder(target_type, user_id)

            src_path = os.path.join(source_folder, filename)
            dst_path = os.path.join(target_folder, filename)

            if not os.path.isfile(src_path):
                await inter.edit_original_message(f"–§–∞–π–ª **{filename}** –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{source_type}`.")
                return

            if os.path.exists(dst_path):
                await inter.edit_original_message(
                    f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{target_type}` —É–∂–µ –µ—Å—Ç—å —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º **{filename}**."
                )
                return

            os.makedirs(target_folder, exist_ok=True)
            shutil.move(src_path, dst_path)

            Logger.log(f"[{inter.author.id}] –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª —Ç—Ä–µ–∫ {filename} –∏–∑ {source_type} ‚Üí {target_type}")

            await inter.edit_original_message(
                f"‚úÖ –¢—Ä–µ–∫ **{filename}** —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â—ë–Ω –∏–∑ `{source_type}` –≤ `{target_type}`."
            )

        except Exception as e:
            Logger.log_exception(e)
            await inter.edit_original_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {e}")

    @commands.slash_command(name="track_duration", description="–£–∑–Ω–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    async def track_duration(
            self,
            inter: disnake.ApplicationCommandInteraction,
            track_type: str = commands.Param(
                choices=["music", "ambient", "mixed"],
                description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–∫–∞"),
            filename: str = commands.Param(description="–ò–º—è —Ñ–∞–π–ª–∞ —Ç—Ä–µ–∫–∞ (–≤–∫–ª—é—á–∞—è .mp3)")
    ):
        await inter.response.defer(ephemeral=True)

        # –ü–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_folder = get_user_folder(track_type, inter.author.id)
        file_path = os.path.join(user_folder, filename)
        if not os.path.isfile(file_path):
            await inter.edit_original_message("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration_sec = AudioMixer.get_track_duration(file_path)
        if duration_sec <= 0:
            await inter.edit_original_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
            return

        hrs = int(duration_sec // 3600)
        mins = int((duration_sec % 3600) // 60)
        secs = int(duration_sec % 60)
        duration_str = f"{hrs:02d}:{mins:02d}:{secs:02d}"

        await inter.edit_original_message(
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å `{filename}` –∏–∑ `{track_type}`: **{duration_str}**"
        )

    @track_duration.autocomplete("filename")
    @move_track.autocomplete("filename")
    @delete_track.autocomplete("filename")
    async def track_manager_autocomplete(self, inter, user_input: str):
        return await filename_autocomplete(inter, user_input)

def setup(bot: commands.Bot):
    bot.add_cog(TrackManagementCog(bot))
    print("TrackManagementCog –∑–∞–≥—Ä—É–∂–µ–Ω")

def teardown(bot: commands.Bot):
    bot.remove_cog("TrackManagementCog")
    print("TrackManagementCog —É–¥–∞–ª–µ–Ω")
# Copyright 2025 Elshan Isayev Elman Oglu
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import asyncio
import disnake
from disnake import OptionChoice
from disnake.ext import commands
import os

from utils.audio import AudioSourceManager
from utils.autocomplete_helpers import filename_autocomplete
from utils.commands import play_command, pause_command, resume_command, stop_command, loop_command
from utils.functions import get_user_folder, get_files_in_folder, ensure_voice
from utils.mix import AudioMixer

class MusicCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="play", description="–ü—Ä–æ–∏–≥—Ä–∞—Ç—å —Ç—Ä–µ–∫ –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    async def play(self, inter: disnake.ApplicationCommandInteraction,
                   track_type: str = commands.Param(choices=["music", "ambient", "mixed"], description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–∫–∞"),
                   filename: str = commands.Param(description="–ò–º—è —Ñ–∞–π–ª–∞ —Ç—Ä–µ–∫–∞")):
        await play_command(self.bot.guild_players, inter, track_type, filename)

    @commands.slash_command(description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º—ã–π —Ç—Ä–µ–∫")
    async def now_playing(self, inter: disnake.ApplicationCommandInteraction):
        player = self.bot.guild_players.get(inter.guild_id)
        if not player or not player.current_track or not player.voice or not player.voice.is_playing():
            await inter.response.send_message("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.", ephemeral=True)
            return

        filename = os.path.basename(player.current_track)
        await inter.response.send_message(f"üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: `{filename}` (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: `{player.current_type}`)")

    @commands.slash_command(description="–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –Ω–∞ –ø–∞—É–∑—É")
    async def pause(self, inter: disnake.ApplicationCommandInteraction):
        player = self.bot.guild_players.get(inter.guild_id)
        await pause_command(player, inter)

    @commands.slash_command(description="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
    async def resume(self, inter: disnake.ApplicationCommandInteraction):
        player = self.bot.guild_players.get(inter.guild_id)
        await resume_command(player, inter)

    @commands.slash_command(description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
    async def stop(self, inter: disnake.ApplicationCommandInteraction):
        player = self.bot.guild_players.get(inter.guild_id)
        await stop_command(player, inter)

    @commands.slash_command(description="–ü–æ–∫–∏–Ω—É—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª")
    async def leave(self, inter: disnake.ApplicationCommandInteraction):
        player = self.bot.guild_players.get(inter.guild_id)
        if player and player.voice:
            await player.cancel_loop_task()
            await player.voice.disconnect()
            player.voice = None
            await inter.response.send_message("üëã –ë–æ—Ç –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.", ephemeral=True)
        else:
            await inter.response.send_message("–ë–æ—Ç –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)

    @commands.slash_command(description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
    async def set_volume(self, inter: disnake.ApplicationCommandInteraction,
                         volume: float = commands.Param(ge=0.0, le=2.0, description="–ì—Ä–æ–º–∫–æ—Å—Ç—å –æ—Ç 0.0 –¥–æ 2.0")):
        player = self.bot.guild_players.get(inter.guild_id)
        if not player or not player.current_type:
            await inter.response.send_message("–ü–ª–µ–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞.", ephemeral=True)
            return

        player.set_volume(player.current_type, volume)
        await inter.response.send_message(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è {player.current_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ {volume}", ephemeral=True)

    @commands.slash_command(description="–ü–µ—Ä–µ–º–æ—Ç–∞—Ç—å —Ç—Ä–µ–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)")
    async def seek(self, inter: disnake.ApplicationCommandInteraction,
                   position: float = commands.Param(ge=0.0, description="–ü–æ–∑–∏—Ü–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –ø–µ—Ä–µ–º–æ—Ç–∫–∏")):
        player = self.bot.guild_players.get(inter.guild_id)
        if not player or not player.current_track:
            await inter.response.send_message("–ù–µ—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º–æ–≥–æ —Ç—Ä–µ–∫–∞.", ephemeral=True)
            return
        try:
            await player.seek(position)
            await inter.response.send_message(f"–ü–µ—Ä–µ–º–æ—Ç–∞–Ω–æ –Ω–∞ {position} —Å–µ–∫—É–Ω–¥.", ephemeral=True)
        except Exception as e:
            await inter.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–æ—Ç–∫–µ: {e}", ephemeral=True)

    @commands.slash_command(description="–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞")
    async def loop(self, inter: disnake.ApplicationCommandInteraction,
                   enable: bool = commands.Param(description="–í–∫–ª—é—á–∏—Ç—å (true) –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å (false) –ø–æ–≤—Ç–æ—Ä")):
        player = self.bot.guild_players.get(inter.guild_id)
        await loop_command(player, inter, enable)

    @commands.slash_command(description="–°–æ–∑–¥–∞—Ç—å –∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –º–∏–∫—Å –∏–∑ –º—É–∑—ã–∫–∏ –∏ —ç–º–±–∏–µ–Ω—Ç–∞")
    async def mix(self, inter: disnake.ApplicationCommandInteraction,
                  music_file: str = commands.Param(description="–§–∞–π–ª –º—É–∑—ã–∫–∏"),
                  ambient_file: str = commands.Param(description="–§–∞–π–ª —ç–º–±–∏–µ–Ω—Ç–∞"),
                  mix_name: str = commands.Param(description="–ò–º—è –¥–ª—è –º–∏–∫—Å–∞"),
                  music_volume: float = commands.Param(default=1.0, ge=0.0, le=2.0, description="–ì—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏"),
                  ambient_volume: float = commands.Param(default=0.5, ge=0.0, le=2.0, description="–ì—Ä–æ–º–∫–æ—Å—Ç—å —ç–º–±–∏–µ–Ω—Ç–∞")):
        await inter.response.defer(ephemeral=True)
        guild_id = inter.guild_id

        music_folder = get_user_folder("music", inter.author.id)
        ambient_folder = get_user_folder("ambient", inter.author.id)

        music_path = os.path.join(music_folder, music_file)
        ambient_path = os.path.join(ambient_folder, ambient_file)

        if not os.path.exists(music_path) or not os.path.exists(ambient_path):
            await inter.edit_original_message("–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        output_folder = os.path.join("music", "mixed", str(inter.author.id))
        os.makedirs(output_folder, exist_ok=True)
        output_filename = f"{mix_name}.mp3"
        output_path = os.path.join(output_folder, output_filename)

        try:
            await asyncio.to_thread(AudioMixer.mix_tracks, music_path, ambient_path, music_volume, ambient_volume,
                                    output_path)
        except Exception as e:
            await inter.edit_original_message(f"–û—à–∏–±–∫–∞ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return

        player = self.bot.guild_players.get(guild_id)
        if not player:
            player = AudioSourceManager(guild_id)
            self.bot.guild_players[guild_id] = player

        if not inter.author.voice or not inter.author.voice.channel:
            await inter.edit_original_message("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
            return

        voice_channel = inter.author.voice.channel
        await ensure_voice(player, voice_channel)

        await inter.edit_original_message(f"–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è –º–∏–∫—Å `{output_filename}`")

        await player.play(output_path, track_type="mixed")

    @play.autocomplete("filename")
    async def music_autocomplete(self, inter, user_input: str):
        return await filename_autocomplete(inter, user_input)

    @mix.autocomplete("music_file")
    async def mix_music_autocomplete(self, inter, user_input: str):
        user_folder = get_user_folder("music", inter.author.id)
        files = get_files_in_folder(user_folder, user_input)
        return [OptionChoice(name=f, value=f) for f in files[:25]]

    @mix.autocomplete("ambient_file")
    async def mix_ambient_autocomplete(self, inter, user_input: str):
        user_folder = get_user_folder("ambient", inter.author.id)
        files = get_files_in_folder(user_folder, user_input)
        return [OptionChoice(name=f, value=f) for f in files[:25]]

    # ------------------ FADE commands ------------------
    @commands.slash_command(description="–ü—Ä–∏–º–µ–Ω–∏—Ç—å fade in/out –∫ —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–∫—É")
    async def fade(self, inter: disnake.ApplicationCommandInteraction,
                   mode: str = commands.Param(choices=["in", "out"], description="–¢–∏–ø —Ñ–µ–π–¥–∞"),
                   duration: float = commands.Param(default=5.0, ge=0.1, le=300.0,
                                                    description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–µ–π–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")):
        player = self.bot.guild_players.get(inter.guild_id)
        if not player or not player.current_track:
            await inter.response.send_message("–ù–µ—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º–æ–≥–æ —Ç—Ä–µ–∫–∞.", ephemeral=True)
            return

        await inter.response.defer(ephemeral=True)
        if mode == "out":
            await player.fade_out(duration)
            await inter.edit_original_message(f"–ü—Ä–∏–º–µ–Ω—ë–Ω fade-out –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {duration} —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.")
        else:
            # restart with fade-in from start
            await player.restart_with_fade_in(duration)
            await inter.edit_original_message(f"–¢—Ä–µ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å fade-in –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {duration}.")

    @commands.slash_command(description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ fade –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–µ–∫–æ–≤ (–≤–∫–ª/–≤—ã–∫–ª –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)")
    async def fade_config(self, inter: disnake.ApplicationCommandInteraction,
                          track_type: str = commands.Param(choices=["music", "ambient", "mixed"],
                                                           description="–¢–∏–ø —Ç—Ä–µ–∫–∞"),
                          enable_in: bool = commands.Param(default=None, description="–í–∫–ª—é—á–∏—Ç—å fade-in?"),
                          enable_out: bool = commands.Param(default=None, description="–í–∫–ª—é—á–∏—Ç—å fade-out?"),
                          in_duration: float = commands.Param(default=None, ge=0.1, le=60.0,
                                                              description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å fade-in (—Å–µ–∫)"),
                          out_duration: float = commands.Param(default=None, ge=0.1, le=300.0,
                                                               description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å fade-out (—Å–µ–∫)"),
                          apply_to_current: bool = commands.Param(default=False,
                                                                  description="–ü—Ä–∏–º–µ–Ω–∏—Ç—å out –∫ —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–∫—É —Å—Ä–∞–∑—É?")):
        """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ fade –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–µ–µ—Ä–∞ (–¥–µ–π—Å—Ç–≤—É—é—Ç –ø–æ–∫–∞ –ø–ª–µ–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."""
        player = self.bot.guild_players.get(inter.guild_id)
        if not player:
            await inter.response.send_message("–ü–ª–µ–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.", ephemeral=True)
            return

        # –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ–ø—É—Å—Ç–æ–π)
        if enable_in is not None or enable_out is not None:
            player.set_fade_enabled(track_type, fade_in_enabled=enable_in, fade_out_enabled=enable_out)
        if in_duration is not None or out_duration is not None:
            player.set_fade_duration(track_type, in_dur=in_duration, out_dur=out_duration)

        # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≥–ª—É—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
        if apply_to_current and enable_out:
            cfg = player.get_fade_settings(track_type)
            out_dur = cfg.get("out_dur", 5.0)
            # –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç —Ç–æ—Ç –∂–µ —Ç–∏–ø ‚Äî –ø—Ä–∏–º–µ–Ω–∏–º fade_out
            if player.current_type == track_type and player.voice and player.voice.is_playing():
                await player.fade_out(out_dur)

        cfg = player.get_fade_settings(track_type)
        await inter.response.send_message(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ fade –¥–ª—è `{track_type}`: in_enabled={cfg.get('in_enabled')}, in_dur={cfg.get('in_dur')}; "
            f"out_enabled={cfg.get('out_enabled')}, out_dur={cfg.get('out_dur')}",
            ephemeral=True
        )

    @commands.slash_command(description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ fade –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–µ–∫–æ–≤")
    async def fade_status(self, inter: disnake.ApplicationCommandInteraction,
                          track_type: str = commands.Param(choices=["music", "ambient", "mixed"],
                                                           description="–¢–∏–ø —Ç—Ä–µ–∫–∞")):
        player = self.bot.guild_players.get(inter.guild_id)
        if not player:
            await inter.response.send_message("–ü–ª–µ–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.", ephemeral=True)
            return
        cfg = player.get_fade_settings(track_type)
        await inter.response.send_message(
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ fade –¥–ª—è `{track_type}`: in_enabled={cfg.get('in_enabled')}, in_dur={cfg.get('in_dur')}; "
            f"out_enabled={cfg.get('out_enabled')}, out_dur={cfg.get('out_dur')}",
            ephemeral=True
        )

def setup(bot: commands.Bot):
    bot.add_cog(MusicCog(bot))
    print("MusicCog –∑–∞–≥—Ä—É–∂–µ–Ω")


def teardown(bot: commands.Bot):
    bot.remove_cog("MusicCog")
    print("MusicCog —É–¥–∞–ª–µ–Ω")
